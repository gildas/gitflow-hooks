#!/usr/bin/env bash

# Runs at the end of git flow hotfix start
#
# Positional arguments:
# $1    The version (including the version prefix)
# $2    The origin remote
# $3    The full branch name (including the feature prefix)
# $4    The base from which this feature is started
#
# The following variables are available as they are exported by git-flow:
#
# MASTER_BRANCH - The branch defined as Master
# DEVELOP_BRANCH - The branch defined as Develop
#
# @see https://github.com/petervanderdoes/gitflow-avh/blob/develop/hooks/post-flow-hotfix-start
VERSION=$1
ORIGIN=$2
BRANCH=$3
BASE=$4

# Find the folder location through potential symlinks
if [[ -z $HOOKS_DIR ]]; then
  HOOKS_DIR="$0"
  while [[ -h $HOOKS_DIR ]]; do HOOK_PATH=$(readlink "$HOOKS_DIR"); done
  HOOKS_DIR=$(dirname $HOOKS_DIR)
fi
source "$HOOKS_DIR"/functions.sh
source "$HOOKS_DIR"/functions-lang.sh

verbose "Hook: post-flow-hotfix-start"

if get_config_bool gitflow.bump-chart true; then
  CHART_DIR=$(get_config gitflow.path.chart "$ROOT_DIR/chart")
  if [[ -f $CHART_DIR/Chart.yaml ]]; then
    stash=$(git stash list | awk '/chart/{gsub(":","",$1); print $1}')
    if [[ -n $stash ]]; then
      git stash pop --quiet
      git add "$CHART_DIR/Chart.yaml"
      die_on_error "Failed to stage $CHART_DIR/Chart.yaml"
      CHART_VERSION=$(get_chart_version "$CHART_DIR/Chart.yaml")
      git commit -m "Bumped Chart to version $CHART_VERSION" "$CHART_DIR/Chart.yaml"
      die_on_error "Failed to commit new Chart version $CHART_VERSION"
    fi
  fi
fi

if get_config_bool gitflow.bump-appveyor true; then
  if [[ -f appveyor.yml ]]; then
    stash=$(git stash list | awk '/appveyor/{gsub(":","",$1); print $1}')
    if [[ -n $stash ]]; then
      git stash pop --quiet $stash
      git add appveyor.yml
      die_on_error "Failed to stage appveyor.yml"
      git commit -m "Updated Appveyor version" appveyor.yml
      die_on_error "Failed to commit new Appveyor version $VERSION"
    fi
  fi
fi

VERSION_FILE=$(find_version_file)
die_on_error

VERSION=$(normalize_version "$VERSION")

update_version_file "$VERSION_FILE" $VERSION
die_on_error "Failed to update $VERSION_FILE with version $VERSION"

if get_config_bool gitflow.bump-dockerfile true; then
  DOCKERFILE=$(get_config gitflow.path.dockerfile "$ROOT_DIR/Dockerfile")
  if [[ -f $DOCKERFILE ]]; then
    update_dockerfile_version "$DOCKERFILE" $VERSION
    die_on_error "Failed to update Dockerfile ($DOCKERFILE) with version $VERSION"
    git add Dockerfile
    die_on_error "Failed to stage Dockerfile"
  fi
fi

git add "$VERSION_FILE"
die_on_error "Failed to stage $VERSION_FILE"
git commit -m "Bumped to version $VERSION"
die_on_error "Failed to commit new version $VERSION"

if get_config_bool gitflow.use-pull-request true; then
  echo "This repository uses Pull Requests."
  echo ""
  echo "To start a pull request, publish your hotfix:"
  echo ""
  echo "  git flow hotfix release $BRANCH"
  echo ""
  echo "If you want to simply push the hotfix to the $ORIGIN, just push it:"
  echo ""
  echo "  git push -u $ORIGIN $BRANCH"
  echo ""
  echo "Once the Pull Request has been merged, simply finish the hotfix."
fi

exit 0
