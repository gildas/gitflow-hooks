#!/usr/bin/env bash

if [[ -z $HOOKS_DIR ]]; then
  HOOKS_DIR="$0"
  while [[ -h $HOOKS_DIR ]]; do HOOK_PATH=$(readlink "$HOOKS_DIR"); done
  HOOKS_DIR=$(dirname $HOOKS_DIR)
fi
source "$HOOKS_DIR"/functions.sh

verbose "Hook: pre-commit"

if ! get_config_bool gitflow.allow-master-commit; then
  MASTER=$(git config --get gitflow.branch.master)
  BRANCH=$(git symbolic-ref HEAD)
  [[ $BRANCH == "refs/heads/$MASTER" ]] && die "Direct commits to the $MASTER branch are forbidden"
fi

# Check if there is any merge that is not resolved in the files to commit
if ! get_config_bool gitflow.allow-conflict-commit; then
  files_to_merge=()
  for file in $(git diff-index --name-only --diff-filter=ACM --cached HEAD --); do
    if grep -Erls "^<<<<<<< |^>>>>>>> $" "$file" 2>&1 >/dev/null; then
      if ! is_binary "$file"; then
        files_to_merge=($files_to_merge $file)
      fi
    fi
  done
  [[ ${#files_to_merge[@]} > 0 ]] && die "Resolve these merges before committing! ${files_to_merge[@]}"
fi

STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep "\.go$")

if get_config_bool gitflow.prettify true; then
  GOFMT=$(command -v gofmt)
  if (( $? )); then
    GOFMT=$GOROOT/bin/gofmt
    if [[ ! -e $GOFMT ]]; then
      go install gofmt
    fi
    [[ ! -e $GOFMT ]] && die "The gofmt tool is missing, aborting"
  fi

  stop_processing=0
  for file in $STAGED_GO_FILES ; do
    output=$($GOFMT -s -w $file)
    # Any output from gofmt indicates a problem
    if [[ -n $output ]]; then
      error "$file is not formatted properly: $output"
      stop_processing=1
    else
      git add $file
    fi
  done
  (( stop_processing )) && die "Fix the formatting errors and try again"
fi


exit 0
