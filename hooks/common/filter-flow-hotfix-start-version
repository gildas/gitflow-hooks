#!/usr/bin/env bash

# Runs during git flow hotfix start
#
# Positional arguments:
# $1    Version
#
# Return VERSION - When VERSION is returned empty, git-flow will stop as the
# version is necessary
#
# The following variables are available as they are exported by git-flow:
#
# MASTER_BRANCH - The branch defined as Master
# DEVELOP_BRANCH - The branch defined as Develop
#
# @see: https://github.com/petervanderdoes/gitflow-avh/blob/develop/hooks/filter-flow-hotfix-start-version
VERSION=$1

# Find the folder location through potential symlinks
if [[ -z $HOOKS_DIR ]]; then
  HOOKS_DIR="$0"
  while [[ -h $HOOKS_DIR ]]; do HOOK_PATH=$(readlink "$HOOKS_DIR"); done
  HOOKS_DIR=$(dirname $HOOKS_DIR)
fi
source "$HOOKS_DIR"/functions.sh
source "$HOOKS_DIR"/functions-lang.sh

VERSION_FILE=$(find_version_file)
die_on_error "$VERSION_FILE"

VERSION=$(normalize_version "$VERSION")
BUMP="$VERSION"  # Use the version as a bump label (e.g.: git flow xx start patch)

if [[ ! $VERSION =~ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
  VERSION=$(get_version  "$VERSION_FILE") ; die_on_error
  VERSION=$(bump_version $VERSION $BUMP)  ; die_on_error
fi

echo "Checking for Chart"
if [[ -f $ROOT_DIR/chart/Chart.yaml ]]; then
  echo "Found Chart"
  CHART_VERSION=$(grep "^version:" $ROOT_DIR/chart/Chart.yaml | sed -E "s/^version:\s+([0-9]+\.[0-9]+\.[0-9]+)/\1/")
  echo "Current Chart Version: $CHART_VERSION"
  CHART_VERSION=$(bump_version $CHART_VERSION $LEVEL)
  echo "New     Chart Version: $CHART_VERSION"
  sed -Ei "/^version:/s/[0-9]+\.[0-9]+\.[0-9]+/${CHART_VERSION}/" "$ROOT_DIR/chart/Chart.yaml"
fi

# Return the VERSION
echo "${VERSION}"
exit 0
