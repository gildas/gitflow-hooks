#!/usr/bin/env bash

# Runs before of git flow feature finish
#
# Positional arguments:
# $1    The version (including the version prefix)
# $2    The origin remote
# $3    The full branch name (including the feature prefix)
#
# The following variables are available as they are exported by git-flow:
#
# MASTER_BRANCH - The branch defined as Master
# DEVELOP_BRANCH - The branch defined as Develop
#
# @see https://github.com/petervanderdoes/gitflow-avh/blob/develop/hooks/pre-flow-feature-finish
VERSION=$1
ORIGIN=$2
BRANCH=$3
ORIGIN_URL=$(git config remote.${ORIGIN}.url)
CURRENT_BRANCH=$(git branch --show-current)

# Find the folder location through potential symlinks
if [[ -z $HOOKS_DIR ]]; then
  HOOKS_DIR="$0"
  while [[ -h $HOOKS_DIR ]]; do HOOK_PATH=$(readlink "$HOOKS_DIR"); done
  HOOKS_DIR=$(dirname $HOOKS_DIR)
fi
source "$HOOKS_DIR"/functions.sh

if ! get_config_bool gitflow.use-pull-request true; then
  verbose "Pull requests are disabled. Feature can be finished."
  exit 0
fi

# We should stop the finish if there is still a PR that is not merged
if [[ $ORIGIN_URL =~ ^git@github\.com ]]; then
  if command -v gh &> /dev/null; then
    PR_STATE=$(gh pr view $BRANCH --json state --jq .state)
    die_on_error "There is no Pull Request for branch $BRANCH, please publish this feature before finishing it."
    if [[ $PR_STATE != MERGED ]]; then
      die "There is a Pull Request that is not yet merged, please wait (Status: $PR_STATE)"
    fi
    verbose "Fetching ${DEVELOP_BRANCH} from $ORIGIN"
    if [[ $CURRENT_BRANCH == $MASTER_BRANCH ]]; then
      git pull
    else
      git fetch $ORIGIN ${MASTER_BRANCH}:${MASTER_BRANCH}
    fi
    die_on_error "Failed to fetch $DEVELOP_BRANCH from $ORIGIN"
  else
    die "gh is not available, so I cannot check pull request states on $ORIGIN ($ORIGIN_URL)"
  fi
elif [[ $ORIGIN_URL =~ ^https://github\.com ]]; then
  if command -v gh &> /dev/null; then
    PR_STATE=$(gh pr view $BRANCH --json state --jq .state)
    die_on_error "There is no Pull Request for branch $BRANCH, please publish this feature before finishing it."
    if [[ $PR_STATE != MERGED ]]; then
      die "There is a Pull Request that is not yet merged, please wait (Status: $PR_STATE)"
    fi
    verbose "Fetching ${DEVELOP_BRANCH} from $ORIGIN"
    if [[ $CURRENT_BRANCH == $MASTER_BRANCH ]]; then
      git pull
    else
      git fetch $ORIGIN ${MASTER_BRANCH}:${MASTER_BRANCH}
    fi
    die_on_error "Failed to fetch $DEVELOP_BRANCH from $ORIGIN"
  else
    die "gh is not available, so I cannot check pull request states on $ORIGIN ($ORIGIN_URL)"
  fi
elif [[ $ORIGIN_URL =~ ^git@bitbucket\.org ]]; then
  repo=$(echo $ORIGIN_URL | sed -e 's/^git@bitbucket\.org://' -e 's/\.git$//')
  token=$(get_config bitbucket.api.access-token)
  [[ -z $token ]] && die "Bitbucket's API Access Token is empty"
  verbose "Checking Pull Request on repository $repo for $BRANCH"
  PR_STATE=$(curl -sS \
    --header "Authorization: Bearer $token" \
    https://api.bitbucket.org/2.0/repositories/${repo}/pullrequests?state=ALL |\
    jq -r --arg BRANCH $BRANCH '
      .values |= sort_by(.updated_on) |
      last(.values[] | select(.source.branch.name == $BRANCH) | .state)'
  )
  die_on_error "There is no Pull Request for branch $BRANCH, please publish this feature before finishing it."
  if [[ $PR_STATE != MERGED ]]; then
    die "There is a Pull Request that is not yet merged, please wait (Status: $PR_STATE)"
  fi
  verbose "Fetching ${DEVELOP_BRANCH} from $ORIGIN"
  if [[ $CURRENT_BRANCH == $MASTER_BRANCH ]]; then
    git pull
  else
    git fetch $ORIGIN ${MASTER_BRANCH}:${MASTER_BRANCH}
  fi
  die_on_error "Failed to fetch $DEVELOP_BRANCH from $ORIGIN"
elif [[ $ORIGIN_URL =~ ^https://.*bitbucket\.org ]]; then
  repo=$(echo $ORIGIN_URL | sed -e 's/https:\/\/.*bitbucket\.org\///' -e 's/\.git$//')
  token=$(get_config bitbucket.api.access-token)
  [[ -z $token ]] && die "Bitbucket's API Access Token is empty"
  verbose "Checking Pull Request on repository $repo for $BRANCH"
  PR_STATE=$(curl -sS \
    --header "Authorization: Bearer $token" \
    https://api.bitbucket.org/2.0/repositories/${repo}/pullrequests?state=ALL |\
    jq -r --arg BRANCH $BRANCH '
      .values |= sort_by(.updated_on) |
      last(.values[] | select(.source.branch.name == $BRANCH) | .state)'
  )
  die_on_error "There is no Pull Request for branch $BRANCH, please publish this feature before finishing it."
  if [[ $PR_STATE != MERGED ]]; then
    die "There is a Pull Request that is not yet merged, please wait (Status: $PR_STATE)"
  fi
  verbose "Fetching ${DEVELOP_BRANCH} from $ORIGIN"
  if [[ $CURRENT_BRANCH == $MASTER_BRANCH ]]; then
    git pull
  else
    git fetch $ORIGIN ${MASTER_BRANCH}:${MASTER_BRANCH}
  fi
  die_on_error "Failed to fetch $DEVELOP_BRANCH from $ORIGIN"
elif [[ $ORIGIN_URL =~ ^git@gitlab\.com ]]; then
  if command -v glab &> /dev/null; then
    PR_STATE=$(glab mr view $BRANCH | awk '/^state:/{print $2}')
    die_on_error "There is no Pull Request for branch $BRANCH, please publish this feature before finishing it."
    if [[ $PR_STATE != merged ]]; then
      die "There is a Pull Request that is not yet merged, please wait (Status: $PR_STATE)"
    fi
    verbose "Fetching ${DEVELOP_BRANCH} from $ORIGIN"
    if [[ $CURRENT_BRANCH == $MASTER_BRANCH ]]; then
      git pull
    else
      git fetch $ORIGIN ${MASTER_BRANCH}:${MASTER_BRANCH}
    fi
    die_on_error "Failed to fetch $DEVELOP_BRANCH from $ORIGIN"
  else
    die "glab is not available, so I cannot check pull request states on $ORIGIN ($ORIGIN_URL)"
  fi
else
  die "$ORIGIN ($ORIGIN_URL) is not a github repository, so I cannot check pull request states"
fi

exit 0
