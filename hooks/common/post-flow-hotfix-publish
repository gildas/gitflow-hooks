#!/usr/bin/env bash
#
# Runs at the end of git flow hotfix publish
#
# Positional arguments:
# $1    The friendly name of the branch (including the version prefix)
# $2    The origin remote
# $3    The full branch name (including the hotfix prefix)
#
# The following variables are available as they are exported by git-flow:
#
# MASTER_BRANCH - The branch defined as Master
# DEVELOP_BRANCH - The branch defined as Develop
#
# @see https://github.com/petervanderdoes/gitflow-avh/blob/develop/hooks/post-flow-hotfix-publish
VERSION=$1
ORIGIN=$2
BRANCH=$3
ORIGIN_URL=$(git config remote.${ORIGIN}.url)

# Find the folder location through potential symlinks
if [[ -z $HOOKS_DIR ]]; then
  HOOKS_DIR="$0"
  while [[ -h $HOOKS_DIR ]]; do HOOK_PATH=$(readlink "$HOOKS_DIR"); done
  HOOKS_DIR=$(dirname $HOOKS_DIR)
fi
source "$HOOKS_DIR"/functions.sh

if ! get_config_bool gitflow.use-pull-request true; then
  verbose "Pull requests are disabled. Skipping Pull Request creation."
  exit 0
fi

if [[ $ORIGIN_URL =~ ^git@github\.com ]]; then
  repo=$(echo $ORIGIN_URL | sed -e 's/^git@github\.com://' -e 's/\.git$//')
  if command -v gh &> /dev/null; then
    gh pr create \
      --title "Merge $BRANCH" \
      --body  "Hotfix $VERSION. Do not delete the hotfix branch after the merge." \
      --base  $MASTER_BRANCH \
      --repo  $repo
  # TODO: use --web optionally so the user can edit the PR?!?
    die_on_error "Failed to create a Pull Request"
  else
    echo ""
    echo "Create Pull Request at: https://github.com/$repo/compare/$BRANCH?expand=1"
    echo "Do not delete the hotfix branch after the Pull Request is merged. It will be deleted automatically when the hotfix is finished."
    echo ""
  fi
elif [[ $ORIGIN_URL =~ ^https://github\.com ]]; then
  repo=$(echo $ORIGIN_URL | sed -e 's/https:\/\/github\.com\///' -e 's/\.git$//')
  if command -v gh &> /dev/null; then
    gh pr create \
      --title "Merge $BRANCH" \
      --body  "Hotfix $VERSION. Do not delete the hotfix branch after the merge." \
      --base  $MASTER_BRANCH \
      --repo  $repo
  # TODO: use --web optionally so the user can edit the PR?!?
    die_on_error "Failed to create a Pull Request"
  else
    echo ""
    echo "Create Pull Request at: https://github.com/$repo/compare/$BRANCH?expand=1"
    echo "Do not delete the hotfix branch after the Pull Request is merged. It will be deleted automatically when the hotfix is finished."
  fi
elif [[ $ORIGIN_URL =~ ^git@bitbucket\.org ]]; then
  repo=$(echo $ORIGIN_URL | sed -e 's/^git@bitbucket\.org://' -e 's/\.git$//')
  token=$(get_config bitbucket.api.access-token)
  [[ -z $token ]] && die "Bitbucket's API Access Token is empty"
  verbose "Creating a Pull Request on repository $repo"
  curl https://api.bitbucket.org/2.0/repositories/${repo}/pullrequests \
    --request POST \
    --header "Authorization: Bearer ${token}" \
    --header 'Content-Type: application/json' \
    --data @- <<EOM
    {
      "title": "Merge $BRANCH",
      "description": "Hotfix $VERSION. Do not delete the hotfix branch after the merge.",
      "destination": { "branch": { "name": "$MASTER_BRANCH" } },
      "source":      { "branch": { "name": "$BRANCH" } }
   }
EOM
    die_on_error "Failed to create a Pull Request"
elif [[ $ORIGIN_URL =~ ^https://.*bitbucket\.org ]]; then
  repo=$(echo $ORIGIN_URL | sed -e 's/https:\/\/.*bitbucket\.org\///' -e 's/\.git$//')
  token=$(get_config bitbucket.api.access-token)
  [[ -z $token ]] && die "Bitbucket's API Access Token is empty"
  verbose "Creating a Pull Request on repository $repo"
  curl https://api.bitbucket.org/2.0/repositories/${repo}/pullrequests \
    --request POST \
    --header "Authorization: Bearer ${token}" \
    --header 'Content-Type: application/json' \
    --data @- <<EOM
    {
      "title": "Merge $BRANCH",
      "description": "Hotfix $VERSION. Do not delete the hotfix branch after the merge.",
      "destination": { "branch": { "name": "$MASTER_BRANCH" } },
      "source":      { "branch": { "name": "$BRANCH" } }
   }
EOM
    die_on_error "Failed to create a Pull Request"
elif [[ $ORIGIN_URL =~ ^git@gitlab\.com ]]; then
  repo=$(echo $ORIGIN_URL | sed -e 's/^git@gitlab\.com://' -e 's/\.git$//')
  if command -v glab &> /dev/null; then
    glab mr create \
      --title         "Merge $BRANCH" \
      --description   "Hotfix $VERSION. Do not delete the hotfix branch after the merge." \
      --source-branch $BRANCH \
      --target-branch $MASTER_BRANCH \
      --yes
  else
    echo ""
    echo "Create Pull Request at: https://gitlab.com/$repo/-/merge_requests/new"
    echo "Do not delete the feature branch after the Pull Request is merged. It will be deleted automatically when the feature is finished."
    echo ""
  fi
else
  echo "Create a Pull Request manually at $ORIGIN_URL"
  echo "Do not delete the hotfix branch after the Pull Request is merged. It will be deleted automatically when the hotfix is finished."
fi

exit 0
